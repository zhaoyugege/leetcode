题目：
https://leetcode-cn.com/problems/wiggle-subsequence/

#错误
class Solution:
    def wiggleMaxLength(self, nums: List[int]) -> int:
        if len(nums) == 1:return 1
        if len(nums) == 0:return 0
        if len(nums) == 2:
            if nums[1] == nums[0]:
                return 1
            else:
                return 2 
        dp = [2 for _ in range(len(nums))]
        for i in range(2,len(nums)):
            if nums[i-1] < nums[i-2] and nums[i-1] < nums[i]:
                dp[i] = dp[i-1]+1
            elif nums[i-1] > nums[i-2] and nums[i-1] > nums[i]:
                dp[i] = dp[i-1]+1
            elif nums[i-1] == nums[i-2] and nums[i-1] == nums[i]:
                dp[i] = dp[i-1]
            else:
                dp[i] = dp[i-1]
        return dp[-1]
		
正确：
class Solution:
    def wiggleMaxLength(self, nums: List[int]) -> int:
        if len(nums) < 2: return len(nums)
        up = down = 1
        for i in range(1, len(nums)):
            if nums[i] > nums[i-1]: # 当出现升序时, 和**有效**的降序数量上加1
                up = down + 1
            elif nums[i] < nums[i-1]:
                down = up + 1
        return max(down, up)
