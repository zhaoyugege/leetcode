题目：
https://leetcode-cn.com/problems/maximum-length-of-pair-chain/

典型的dp问题,找到状态转移方程，其实就是现在的数[a,b] 的最小的数  要大于之前 最大的数
******存在无序的状态  所以需要先排序*******

class Solution:
    def findLongestChain(self, pairs: List[List[int]]) -> int：
      pair = sorted(pairs,key = lambda x:x[1])
      dp = [1 for _ in range(len(pair))]
      for i in range(len(pair)):
        for j in range(i):
          if pair[i][0]> pair[j][1]:
            dp[i] = max(dp[i],dp[j]+1)
      return max(dp)
 
class Solution:
    def findLongestChain(self, pairs: List[List[int]]) -> int:
        pair=sorted(pairs,key=lambda x:x[0])
        dp = [1 for _ in range(len(pair))]
        for i in range(1,len(pair)):
            for j in range(i):
                if pair[i][0]> pair[j][1]:
                    dp[i] = max(dp[i],dp[j]+1)
        return max(dp)
